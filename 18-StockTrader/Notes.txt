------ PROJECT SETUP AND PLANNING 
- Start project with Vue-cli webpack-simple template 
- Install babel-preset-stage-2 
    - Use this in .babelrc

- PROJECT ORGANIZATION: 
    - Components: 
        - Header 
        - Choose components to be granular enough 
    - Routes: 
        - Home Page 
        - Stocks Page
            - Buy stocks here  
        - Portfolio Page 
            - Look at stocks we own and sell them 

- DEVELOPMENT PROCESS: 
    1) Plan Routes 
    2) Plan Components 
    3) Integrate Vuex Store 
    4) Connect to backend / Set up dummy data 


------ STOCKS COMPONENT 
- Show price 
- Show Name 
- Buy Button 
- Quantity Input field 
- Use card styling from bootstrap
- Use Green button from bootstrap 


------ SETTING UP VUEX STATE MANAGEMENT 
- When designing a store you should think through: 
1) STATE: What needs to be stored in application state?
    - What are the main modules/features/pages of our app? 
    - which components make up the modules?  
    - How can we organize state properties be stored according to the separate modules?
2) MUTATIONS: How should these state properties be mutated? How do they get changed?
    - How do we add data to these fields? 
    - How do we subtract data? 
    - How do we initialize data?
    - How do we set data? 
    - Does the data need to be randomized or sorted?
3) ACTIONS: What data needs to be passed to the mutation?
    - What data needs to be passed to the mutation?
    - Where do we get the data that needs to be passed?
    - What component(s) trigger the update(s)? 
    - How should these updates be triggered/called within the components?
4) GETTERS: What needs to be pulled from application state?
    - What state information needs to be shown to the user? 
    - Where does this information need to be shown? Which components? 
    - How does this information need to be formatted? 



------ ENDING THE DAY - RANDOMIZING STOCKS 
- Just did Math.random type logic in the 
  mutation.  
- Then called the randomizeStocks action on 
  button click.  



------ ANIMATING BETWEEN ROUTE TRANSITIONS 
- Add a <transition></transition> tag in the 
  main route (App.vue)
    - This tag should be used similar to router-view. 

- Add name attribute of the transition tag 
    - This will be used to generate the classes for the animation 
    EXAMPLE: <transition name="thing"><router-view></router-view></transition>
        - Produces CSS classes such as: 
            .thing-enter-active {...}
            .thing-leave-active {...}

- Add mode attribute to transition tag 

- Add CSS: 
    - Fill out animation properties for the classes above 
    - set up @keyframes for those animations 

EXAMPLE: 
    <transition>
        <router-view></router-view>
    </transition>
     

------ SAVING AND FETCHING DATA - GETTING DROPDOWN TO WORK 
- Basically we just conditionally bind the .open class 
  from bootstrap to open up the dropdown 


------ SETTING UP VUE-RESOURCE AND FIREBASE 
- Follow video to set up firebase and install and use Vue-resource 
  as normal
- Just make sure to set the root url default for Vue-resource 
  to be the firebase root URL 


------ SAVING DATA (PUT REQUEST)
- When ever you are saving application state data: 
    1) Load data and app from backend 
    2) As application is used store data in the store and update on front-end 
    3) Then when saving to persistence storage you should just 
       send the data to the database via a component  
        - Use vuex getters to get relevant state data that needs to be saved. 
        - Then after getters fetch state information use component to send 
          data to database 
    4) ALTERNATE APPROACH: 
        - If data is application-wide and NOT saved automatically 
            - You can use the approach of doing HTTP calls to backend 
              all within store actions. 


------ FETCHING/LOADING DATA (GET REQUEST)
- When loading data you can do this through an action 
- The action should make the HTTP request 
    - Then commit that data to the store via mutations. 
    